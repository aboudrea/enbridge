{
	"name": "PL_04_Infant",
	"properties": {
		"description": "Control Framework infant pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
		"activities": [
			{
				"name": "Log Pipeline Running",
				"description": "Sets the current pipeline with a status of running within the current execution database table.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Is Worker Pipeline Valid",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ControlFramework].[SetLogPipelineRunning]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ConfigId": {
							"value": {
								"value": "@pipeline().parameters.configId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretName": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretName",
							"type": "Expression"
						},
						"secretURL": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Execute Web Activity Failure",
				"description": "Handle true failures from calling the Web Activity and update the current execution table accordingly so a restart can occur.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Worker Pipeline",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ControlFramework].[SetLogActivityFailed]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CallingActivity": {
							"value": "ExecuteWorkerPipeline",
							"type": "String"
						},
						"ConfigId": {
							"value": {
								"value": "@pipeline().parameters.configId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretName": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretName",
							"type": "Expression"
						},
						"secretURL": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Update Run Id",
				"description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Worker Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ControlFramework].[SetLogPipelineRunId]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"RunId": {
							"value": {
								"value": "@activity('Execute Worker Pipeline').output.RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ConfigId": {
							"value": {
								"value": "@pipeline().parameters.configId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretName": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretName",
							"type": "Expression"
						},
						"secretURL": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Wait Until Pipeline Completes",
				"description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Get Wait Duration",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Execute Worker Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(contains(activity('Get Worker Pipeline Status').output,'output'),or(or(equals('Succeeded',activity('Get Worker Pipeline Status').output.status),equals('Failed',activity('Get Worker Pipeline Status').output.status)),equals('Cancelled',activity('Get Worker Pipeline Status').output.status)))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Wait If Running",
							"description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@or(or(equals('Succeeded',activity('Get Worker Pipeline Status').output.status),equals('Failed',activity('Get Worker Pipeline Status').output.status)),equals('Cancelled',activity('Get Worker Pipeline Status').output.status))",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Wait for Pipeline",
										"description": "The processing pipeline is still running so Wait before checking its status again.",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": {
												"value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Set Last Check DateTime",
							"description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ControlFramework].[SetLogPipelineLastStatusCheck]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ConfigId": {
										"value": {
											"value": "@pipeline().parameters.configId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzSqlDb",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretName",
										"type": "Expression"
									},
									"secretURL": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Log Check Web Activity Failure",
							"description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ControlFramework].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"CallingActivity": {
										"value": "GetWorkerPipelineStatus",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ConfigId": {
										"value": {
											"value": "@pipeline().parameters.configId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzSqlDb",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretName",
										"type": "Expression"
									},
									"secretURL": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Get Worker Pipeline Status",
							"description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.04:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "https://management.azure.com/subscriptions/@{array(activity('Get Worker Core Details').output.firstRow)[0].subscriptionId}/resourceGroups/@{array(activity('Get Worker Core Details').output.firstRow)[0].resourceGroupName}/providers/Microsoft.DataFactory/factories/@{array(activity('Get Worker Core Details').output.firstRow)[0].dataFactoryName}/pipelineruns/@{activity('Execute Worker Pipeline').output.RunId}?api-version=2018-06-01",
									"type": "Expression"
								},
								"method": "GET",
								"authentication": {
									"type": "MSI",
									"resource": "https://management.azure.com/"
								}
							}
						}
					],
					"timeout": "0.04:00:00"
				}
			},
			{
				"name": "Set Pipeline Result",
				"description": "Receives the outcome from the Web activity execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Wait Until Pipeline Completes",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('Get Worker Pipeline Status').output.status",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "Succeeded",
							"activities": [
								{
									"name": "Pipeline Status Succeeded",
									"description": "Updates the current execution table with a pipeline status of success if the outcome is succeeded.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:01:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[ControlFramework].[SetLogPipelineSuccess]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ConfigId": {
												"value": {
													"value": "@pipeline().parameters.configId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzSqlDb",
										"type": "LinkedServiceReference",
										"parameters": {
											"secretName": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretName",
												"type": "Expression"
											},
											"secretURL": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
												"type": "Expression"
											}
										}
									}
								}
							]
						},
						{
							"value": "Failed",
							"activities": [
								{
									"name": "Pipeline Status Failed",
									"description": "Updates the current execution table with a pipeline status of failed if the outcome is failed. Also blocks pipelines in the downstream execution stage.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:01:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[ControlFramework].[SetLogPipelineFailed]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@activity('Execute Worker Pipeline').output.RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ConfigId": {
												"value": {
													"value": "@pipeline().parameters.configId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzSqlDb",
										"type": "LinkedServiceReference",
										"parameters": {
											"secretName": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretName",
												"type": "Expression"
											},
											"secretURL": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Error Details",
									"description": "Parses pipeline error details and persists them to the metadata database error log table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Worker Pipeline Error Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:01:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[ControlFramework].[SetErrorLogDetails]",
										"storedProcedureParameters": {
											"JsonErrorDetails": {
												"value": {
													"value": "@concat('{\"Errors\": ',\n    replace(\n        replace(\n            replace(\n                replace(\n                    replace(\n                        replace(\n                            replace(\n                                replace(    \n                                replace(\n                                    replace(\n                                        string(activity('Get Worker Pipeline Error Details').output.value),\n                                        'message','ErrorMessage'),\n                                    'failureType','ErrorType'),\n                                '\"error\":{',''),\n                            '},\"activityRunId\"',',\"ActivityRunId\"'),\n                        'errorCode','ErrorCode'),\n                    'activityName','ActivityName'),\n                'activityType','ActivityType'),\n            'activityRunId','ActivityRunId'),\n        'activityRunStart','ActivityRunStart'),\n    'activityRunEnd','ActivityRunEnd')\n,',\"RunId\": \"',pipeline().RunId,'\"}')\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"LocalExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"PipelineName": {
												"value": {
													"value": "@array(activity('Get Worker Core Details').output.firstRow)[0].pipelineName",
													"type": "Expression"
												},
												"type": "String"
											},
											"ConfigId": {
												"value": {
													"value": "@pipeline().parameters.configId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzSqlDb",
										"type": "LinkedServiceReference",
										"parameters": {
											"secretName": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretName",
												"type": "Expression"
											},
											"secretURL": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Get Worker Pipeline Error Details",
									"description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Get Query Run Days Value",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "https://management.azure.com/subscriptions/@{array(activity('Get Worker Core Details').output.firstRow)[0].subscriptionId}/resourceGroups/@{array(activity('Get Worker Core Details').output.firstRow)[0].resourceGroupName}/providers/Microsoft.DataFactory/factories/@{array(activity('Get Worker Core Details').output.firstRow)[0].dataFactoryName}/pipelineruns/@{activity('Execute Worker Pipeline').output.RunId}/queryActivityRuns?api-version=2018-06-01",
											"type": "Expression"
										},
										"method": "POST",
										"body": {
											"value": "{\n  \"lastUpdatedAfter\": \"@{adddays(utcnow(),int(activity('Get Query Run Days Value').output.firstRow.PropertyValue))}\",\n  \"lastUpdatedBefore\": \"@{utcnow()}\",\n  \"filters\": [\n    {\n      \"operand\": \"Status\",\n      \"operator\": \"Equals\",\n      \"values\": [\n        \"Failed\"\n      ]\n    }\n  ]\n}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com/"
										}
									}
								},
								{
									"name": "Get Query Run Days Value",
									"description": "Using the metadata properties table return the run days value to provide the API request with a date range for pipeline executions.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[controlframework].[GetPropertyValue]",
											"storedProcedureParameters": {
												"PropertyName": {
													"type": "String",
													"value": "PreviousPipelineRunsQueryRange"
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ControlFramework",
											"type": "DatasetReference",
											"parameters": {
												"secretName": {
													"value": "@pipeline().globalParameters.controlFrameworkSecretName",
													"type": "Expression"
												},
												"secretURL": {
													"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Email Alert",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Worker Pipeline Error Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_Email_Alert",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DataFactoryName": {
												"value": "@{array(activity('Get Worker Core Details').output.firstRow)[0].dataFactoryName}",
												"type": "Expression"
											},
											"PipelineRunId": {
												"value": "@activity('Execute Worker Pipeline').output.RunId",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@{array(activity('Get Worker Core Details').output.firstRow)[0].pipelineName}",
												"type": "Expression"
											},
											"PipelineId": {
												"value": "@pipeline().parameters.pipelineId",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@activity('Execute Worker Pipeline').output.ADFWebActivityResponseHeaders.Date",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@string(json(string(last(activity('Get Worker Pipeline Error Details').output.value))).error)",
												"type": "Expression"
											},
											"ConfigId": {
												"value": "@pipeline().parameters.configId",
												"type": "Expression"
											}
										}
									}
								}
							]
						},
						{
							"value": "Cancelled",
							"activities": [
								{
									"name": "Pipeline Status Cancelled",
									"description": "Updates the current execution table with a pipeline status of cancelled if the outcome is cancelled.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:01:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[ControlFramework].[SetLogPipelineCancelled]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_AzSqlDb",
										"type": "LinkedServiceReference",
										"parameters": {
											"secretName": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretName",
												"type": "Expression"
											},
											"secretURL": {
												"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Pipeline Status Unknown",
							"description": "Updates the current execution table with a pipeline status of unknown if the outcome is unexpected.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:01:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ControlFramework].[SetLogPipelineUnknown]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ConfigId": {
										"value": {
											"value": "@pipeline().parameters.configId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzSqlDb",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretName",
										"type": "Expression"
									},
									"secretURL": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Get Wait Duration",
				"description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ControlFramework].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "PipelineStatusCheckDuration"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ControlFramework",
						"type": "DatasetReference",
						"parameters": {
							"secretName": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretName",
								"type": "Expression"
							},
							"secretURL": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Is Worker Pipeline Valid",
				"description": "True = the worker pipeline name is valid.\nFalse = the worker pipeline name is invalid. Raise an exception.",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Validate Worker Pipeline",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(activity('Validate Worker Pipeline').output,'name')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Throw Exception - Invalid Infant",
							"description": "Throw an exception with details about the invalid worker pipeline name.",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "PL_Throw_Exception",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Message": {
										"value": "@concat('Worker pipeline [',array(activity('Get Worker Core Details').output.firstRow)[0].pipelineName,'] is not valid in target Orchestrator [',array(activity('Get Worker Core Details').output.firstRow)[0].orchestratorName,']')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Update Execution With Invalid Worker",
							"description": "Update the current execution table with an informed status for the worker pipeline that couldn't be executed.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ControlFramework].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"CallingActivity": {
										"value": "InvalidPipelineName",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ConfigId": {
										"value": {
											"value": "@pipeline().parameters.configId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzSqlDb",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretName",
										"type": "Expression"
									},
									"secretURL": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Log Validate Web Activity Failure",
				"description": "Handle true failures from calling the Web Activity and update the current execution table accordingly so a restart can occur.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Validate Worker Pipeline",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ControlFramework].[SetLogActivityFailed]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CallingActivity": {
							"value": "Check for Valid ADF Pipeline Name",
							"type": "String"
						},
						"ConfigId": {
							"value": {
								"value": "@pipeline().parameters.configId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretName": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretName",
							"type": "Expression"
						},
						"secretURL": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Pipeline Validating",
				"description": "Sets the current pipeline with a status of validating within the current execution database table.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ControlFramework].[SetLogPipelineValidating]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ConfigId": {
							"value": {
								"value": "@pipeline().parameters.configId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretName": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretName",
							"type": "Expression"
						},
						"secretURL": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Get Worker Core Details",
				"description": "Return worker pipeline information for metadata database. Including target data factory, pipeline name and resource group. Return the SPN ID and Secret for the worker pipeline being executed. Called at this level as each pipeline can have a different SPN.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ControlFramework].[GetWorkerDetailsWrapper]",
						"storedProcedureParameters": {
							"ExecutionId": {
								"type": "Guid",
								"value": {
									"value": "@pipeline().parameters.executionId",
									"type": "Expression"
								}
							},
							"PipelineId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.pipelineId",
									"type": "Expression"
								}
							},
							"StageId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.stageId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ControlFramework",
						"type": "DatasetReference",
						"parameters": {
							"secretName": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretName",
								"type": "Expression"
							},
							"secretURL": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Validate Worker Pipeline",
				"description": "Use the Azure Management API to return and establish if the framework pipeline exists in the target Data Factory instance.",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Log Pipeline Validating",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Worker Core Details",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.01:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "https://management.azure.com/subscriptions/@{array(activity('Get Worker Core Details').output.firstRow)[0].subscriptionId}/resourceGroups/@{array(activity('Get Worker Core Details').output.firstRow)[0].resourceGroupName}/providers/Microsoft.DataFactory/factories/@{array(activity('Get Worker Core Details').output.firstRow)[0].dataFactoryName}/pipelines/@{array(activity('Get Worker Core Details').output.firstRow)[0].pipelineName}?api-version=2018-06-01",
						"type": "Expression"
					},
					"method": "GET",
					"body": "",
					"authentication": {
						"type": "MSI",
						"resource": "https://management.azure.com/"
					}
				}
			},
			{
				"name": "Execute Worker Pipeline",
				"description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory.",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Log Pipeline Running",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "https://management.azure.com/subscriptions/@{array(activity('Get Worker Core Details').output.firstRow)[0].subscriptionId}/resourceGroups/@{array(activity('Get Worker Core Details').output.firstRow)[0].resourceGroupName}/providers/Microsoft.DataFactory/factories/@{array(activity('Get Worker Core Details').output.firstRow)[0].dataFactoryName}/pipelines/@{array(activity('Get Worker Core Details').output.firstRow)[0].pipelineName}/createRun?api-version=2018-06-01",
						"type": "Expression"
					},
					"method": "POST",
					"body": {
						"value": "@concat('{\"ConfigId\": \"',string(pipeline().parameters.configId),'\",\"PipelineId\": \"',string(pipeline().parameters.pipelineId),'\"}')",
						"type": "Expression"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://management.azure.com/"
					}
				}
			}
		],
		"parameters": {
			"executionId": {
				"type": "string"
			},
			"stageId": {
				"type": "int"
			},
			"pipelineId": {
				"type": "int"
			},
			"configId": {
				"type": "int"
			}
		},
		"folder": {
			"name": "Control Framework"
		},
		"annotations": [],
		"lastPublishTime": "2022-03-26T14:41:13Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}