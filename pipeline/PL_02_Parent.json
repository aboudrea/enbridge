{
	"name": "PL_02_Parent",
	"properties": {
		"description": "ADF.ControlFramework parent pipeline used to bootstrap the orchestration framework in perform the first level ForEach calls in sequence for the metadata stages.",
		"activities": [
			{
				"name": "Execution Wrapper",
				"description": "Wrapper to reset and restart processing or create a completely new execution instance of the framework metadata.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Pre-Processing",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ControlFramework].[ExecutionWrapper]",
						"storedProcedureParameters": {
							"CallingOrchestratorName": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							},
							"BatchName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.BatchName",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ControlFramework",
						"type": "DatasetReference",
						"parameters": {
							"secretName": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretName",
								"type": "Expression"
							},
							"secretURL": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Pre-Processing",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PL_Pre-Processing",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"BatchName": {
							"value": "@pipeline().parameters.BatchName",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Execute Stages",
				"description": "Top level ForEach to sequentially call all processing stages within the framework metadata. Items for iteration passed from the Get Stages lookup activity.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Stages",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Stages').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Stage Executor",
							"description": "Call to the framework generic child pipeline for a given execution stage.",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Log Stage Preparing",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "PL_03_Child",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"StageId": {
										"value": "@item().StageId",
										"type": "Expression"
									},
									"ExecutionId": {
										"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Log Stage Preparing",
							"description": "Update the current execution table flagging all pipelines within the stage as preparing.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Check and Update Blockers",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ControlFramework].[SetLogStagePreparing]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"StageId": {
										"value": {
											"value": "@item().StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzSqlDb",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretName",
										"type": "Expression"
									},
									"secretURL": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Check and Update Blockers",
							"description": "Used to double check and stop the next execution stage if failures and blockers have be incurred. This also depends on the failure handling property value which defines the stored procedure behaviour.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ControlFramework].[CheckForBlockedPipelines]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"StageId": {
										"value": {
											"value": "@item().StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_AzSqlDb",
								"type": "LinkedServiceReference",
								"parameters": {
									"secretName": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretName",
										"type": "Expression"
									},
									"secretURL": {
										"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Wait1",
							"type": "Wait",
							"dependsOn": [
								{
									"activity": "Stage Executor",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 1
							}
						}
					]
				}
			},
			{
				"name": "Get Stages",
				"description": "Returns a distinct list of execution stages within the framework metadata.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Execution Wrapper",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ControlFramework].[GetStages]",
						"storedProcedureParameters": {
							"ExecutionId": {
								"type": "Guid",
								"value": {
									"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_ControlFramework",
						"type": "DatasetReference",
						"parameters": {
							"secretName": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretName",
								"type": "Expression"
							},
							"secretURL": {
								"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Wait Until Stages Complete",
				"description": "To make sure the next activity does not execute (because once ForEach \"starts\" to execute, activity is considered done and that's not what we want)",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Execute Stages",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "PL_ForEach_Helper",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"ExecutionId": {
							"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Check Outcome and Update Logs",
				"description": "After a successful execution run the current execution metadata is moved to the long term logging table by this stored procedure call. Otherwise an error will be raised.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Wait Until Stages Complete",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ControlFramework].[UpdateExecutionLog]",
					"storedProcedureParameters": {
						"PerformErrorCheck": {
							"value": {
								"value": "@bool(1)",
								"type": "Expression"
							},
							"type": "Boolean"
						},
						"ExecutionId": {
							"value": {
								"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretName": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretName",
							"type": "Expression"
						},
						"secretURL": {
							"value": "@pipeline().globalParameters.controlFrameworkSecretURL",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"BatchName": {
				"type": "string",
				"defaultValue": "Daily"
			}
		},
		"folder": {
			"name": "Control Framework"
		},
		"annotations": [],
		"lastPublishTime": "2022-03-26T22:13:41Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}